# Decision Tree classifier
decision_tree <- rpart(as.factor(OUTCOME)~., data=train)
proba_tree <- predict(object=decision_tree, newdata=test)
pred_tree <- ifelse(proba_tree<0.5, 0, 1)
pred_tree <- factor(pred_tree)
MC_tree <- confusionMatrix(as.factor(test$OUTCOME), pred_tree)
proba_tree <- predict(object=decision_tree, newdata=test)
pred_tree <- ifelse(proba_tree<0.5, 0, 1)
MC_tree <- confusionMatrix(as.factor(test$OUTCOME), pred_tree)
length(pred_tree)
setwd("/Users/barbaragendron/Desktop/Mines_Nancy/2A/Modélisation et prévision/TD")
donnees <- read.table("prostate.txt", header=T, sep=";")
# declarer RAYON, TAILLE, ETAT et Y comme variables qualitatives
donnees[,"RAYON"] <- factor(donnees[,"RAYON"])
donnees[,"TAILLE"] <- factor(donnees[,"TAILLE"])
donnees[,"ETAT"] <- factor(donnees[,"ETAT"])
donnees[,"Y"] <- factor(donnees[,"Y"])
summary(donnees)
summary(data_processed)
getwd()
setwd("/Users/barbaragendron/Desktop/Mines_Nancy/3A_Luxembourg/W1 - actuarial science/Project/")
data <- read.table("Car_Insurance_Claim.csv", header=T, sep=',')
data = data%>%mutate_if(is.character, as.factor)
data$VEHICLE_OWNERSHIP = as.factor(data$VEHICLE_OWNERSHIP)
data$MARRIED = as.factor(data$MARRIED)
data$CHILDREN = as.factor(data$CHILDREN)
data$OUTCOME = as.factor(data$OUTCOME)
data <- na.omit(data)
summary(data)
# KNN
# Decision Tree classifier
decision_tree <- rpart(as.factor(OUTCOME)~., data=train)
# select a subset of the variables according to correlation analysis
data_processed <- data[,!names(data) %in% c('GENDER', 'POSTAL_CODE', 'EDUCATION', 'RACE', 'ID', 'VEHICLE_TYPE')]
summary(data_processed)
# train-test split
set.seed(42)
trainIndex = sample(1:nrow(data_processed), size = round(0.7*nrow(data_processed)), replace=FALSE)
train = data_processed[trainIndex ,]
test = data_processed[-trainIndex ,]
# KNN
# Decision Tree classifier
decision_tree <- rpart(OUTCOME~., data=train)
rpart.plot(decision_tree)
proba_tree <- predict(object=decision_tree, newdata=test)
pred_tree <- ifelse(proba_tree<0.5, 0, 1)
pred_tree <- factor(pred_tree)
MC_tree <- confusionMatrix(as.factor(test$OUTCOME), pred_tree)
MC_tree <- confusionMatrix(test$OUTCOME, pred_tree)
pred_tree <- factor(pred_tree)
MC_tree <- confusionMatrix(test$OUTCOME, pred_tree)
pred_tree <- as.factor(pred_tree)
MC_tree <- confusionMatrix(test$OUTCOME, pred_tree)
proba_tree <- predict(object=decision_tree, newdata=test, type="response")
proba_tree <- predict(object=decision_tree, newdata=test, type="class")
pred_tree <- ifelse(proba_tree<0.5, 0, 1)
pred_tree <- factor(pred_tree)
proba_tree <- predict(object=decision_tree, newdata=test, type="class")
#pred_tree <- ifelse(proba_tree<0.5, 0, 1)
pred_tree <- factor(pred_tree)
MC_tree <- confusionMatrix(test$OUTCOME, pred_tree)
length(test$OUTCOME)
length(pred_tree)
pred_tree
proba_tree <- predict(object=decision_tree, newdata=test, type="class")
proba_tree
pred_tree <- predict(object=decision_tree, newdata=test, type="class")
#pred_tree <- ifelse(proba_tree<0.5, 0, 1)
#pred_tree <- factor(pred_tree)
MC_tree <- confusionMatrix(test$OUTCOME, pred_tree)
MC_tree
MC_tree$table
sum(MC_tree$table)
rf <- randomForest(as.factor(OUTCOME)~., data=train, proximity=TRUE)
print(rf)
pred_rf <- predict(rf, test)
MC_rf <- confusionMatrix(test$OUTCOME, pred_rf)
MC_rf
sum(MC_rf$table)
plot(rf)
# XGBoost with hyperparameters tuning
xgbcv <- xgb.cv(data = train, nrounds = 100,
nfold = 5, showsd = T, stratified = T,
print_every_n = 10, early_stopping_rounds = 20,
maximize = F)
# XGBoost with hyperparameters tuning
xgbcv <- xgb.cv(data = train, label=OUTCOME, nrounds = 100,
nfold = 5, showsd = T, stratified = T,
print_every_n = 10, early_stopping_rounds = 20,
maximize = F)
# XGBoost with hyperparameters tuning
xgbcv <- xgb.cv(data = train, label=data$OUTCOME, nrounds = 100,
nfold = 5, showsd = T, stratified = T,
print_every_n = 10, early_stopping_rounds = 20,
maximize = F)
# Convert train and test to matrix
X_train <- model.matrix(~ INCOME + VEHICLE_YEAR +
SPEEDING_VIOLATIONS + OUTCOME + AGE + DRIVING_EXPERIENCE +
CREDIT_SCORE + MARRIED + ANNUAL_MILEAGE + DUIS +
VEHICLE_OWNERSHIP + CHILDREN +
PAST_ACCIDENTS,data=train)
X_test <- model.matrix(~ INCOME + VEHICLE_YEAR +
SPEEDING_VIOLATIONS + OUTCOME + AGE + DRIVING_EXPERIENCE +
CREDIT_SCORE + MARRIED + ANNUAL_MILEAGE + DUIS +
VEHICLE_OWNERSHIP + CHILDREN +
PAST_ACCIDENTS,data=test)
xgbcv <- xgb.cv(data = X_train, label=data$OUTCOME, nrounds = 100,
nfold = 5, showsd = T, stratified = T,
print_every_n = 10, early_stopping_rounds = 20,
maximize = F)
X_train
dim(X_train)
dim(train)
X_train$OUTCOME
head(X_train)
xgbcv <- xgb.cv(data = X_train, label=data$OUTCOME1, nrounds = 100,
nfold = 5, showsd = T, stratified = T,
print_every_n = 10, early_stopping_rounds = 20,
maximize = F)
labels <- train$OUTCOME
ts_label <- test$OUTCOME
dtrain <- xgb.DMatrix(data = X_train,label = labels)
dtest <- xgb.DMatrix(data = X_test,label=ts_label)
xgbcv <- xgb.cv(data = X_train, label=data$OUTCOME1, nrounds = 100,
nfold = 5, showsd = T, stratified = T,
print_every_n = 10, early_stopping_rounds = 20,
maximize = F)
xgbcv <- xgb.cv(data = dtrain, nrounds = 100,
nfold = 5, showsd = T, stratified = T,
print_every_n = 10, early_stopping_rounds = 20,
maximize = F)
xgbcv
#model #1
xgb1 = xgb.train(data = dtrain,
max.depth = 2,
eta = 1,
nthread = 2,
nrounds = 10,
objective = "binary:logistic",
verbose = 0)
labels <- train$as.numeric(OUTCOME)
ts_label <- test$as.numeric(OUTCOME)
labels <- as.numeric(train$OUTCOME)
ts_label <- as.numeric(test$OUTCOME)
dtrain <- xgb.DMatrix(data = X_train,label = labels)
dtest <- xgb.DMatrix(data = X_test,label=ts_label)
xgbcv <- xgb.cv(data = dtrain, nrounds = 100,
nfold = 5, showsd = T, stratified = T,
print_every_n = 10, early_stopping_rounds = 20,
maximize = F)
xgbcv
#model #1
xgb1 = xgb.train(data = dtrain,
max.depth = 2,
eta = 1,
nthread = 2,
nrounds = 10,
objective = "binary:logistic",
verbose = 0)
xgbpred1 <- predict(xgb1,dtest)
#model #1
xgb1 = xgb.train(data = dtrain,
max.depth = 2,
eta = 1,
nthread = 2,
nrounds = 10,
objective = "binary:logistic",
verbose = 1)
labels
train$OUTCOME
as.numeric(train$OUTCOME)
data <- read.table("Car_Insurance_Claim.csv", header=T, sep=',')
data = data%>%mutate_if(is.character, as.factor)
data$VEHICLE_OWNERSHIP = as.factor(data$VEHICLE_OWNERSHIP)
data$MARRIED = as.factor(data$MARRIED)
data$CHILDREN = as.factor(data$CHILDREN)
data$OUTCOME = as.factor(data$OUTCOME)
data <- na.omit(data)
summary(data)
str(data$OUTCOME)
data <- read.table("Car_Insurance_Claim.csv", header=T, sep=',')
data = data%>%mutate_if(is.character, as.factor)
data$VEHICLE_OWNERSHIP = as.factor(data$VEHICLE_OWNERSHIP)
data$MARRIED = as.factor(data$MARRIED)
data$CHILDREN = as.factor(data$CHILDREN)
data <- na.omit(data)
summary(data)
str(data$OUTCOME)
data$OUTCOME = as.factor(data$OUTCOME)
data$OUTCOME = as.numeric(data$OUTCOME)
summary(data)
data <- read.table("Car_Insurance_Claim.csv", header=T, sep=',')
data = data%>%mutate_if(is.character, as.factor)
data$VEHICLE_OWNERSHIP = as.factor(data$VEHICLE_OWNERSHIP)
data$MARRIED = as.factor(data$MARRIED)
data$CHILDREN = as.factor(data$CHILDREN)
data <- na.omit(data)
summary(data)
data$OUTCOME = as.factor(data$OUTCOME)
data$OUTCOME = as.numeric(level(data$OUTCOME))[data$OUTCOME]
data$OUTCOME = as.numeric(levels(data$OUTCOME))[data$OUTCOME]
summary(data)
data$OUTCOME = as.factor(data$OUTCOME)
data <- na.omit(data)
summary(data)
# select a subset of the variables according to correlation analysis
data_processed <- data[,!names(data) %in% c('GENDER', 'POSTAL_CODE', 'EDUCATION', 'RACE', 'ID', 'VEHICLE_TYPE')]
# train-test split
set.seed(42)
trainIndex = sample(1:nrow(data_processed), size = round(0.7*nrow(data_processed)), replace=FALSE)
train = data_processed[trainIndex ,]
test = data_processed[-trainIndex ,]
# XGBoost with hyperparameters tuning
# Convert OUTCOME to numeric value
data$OUTCOME = as.numeric(levels(data$OUTCOME))[data$OUTCOME]
# XGBoost with hyperparameters tuning
# Convert OUTCOME to numeric value
train$OUTCOME = as.numeric(levels(train$OUTCOME))[train$OUTCOME]
test$OUTCOME = as.numeric(levels(test$OUTCOME))[test$OUTCOME]
# Convert train and test to matrix
X_train <- model.matrix(~ INCOME + VEHICLE_YEAR +
SPEEDING_VIOLATIONS + OUTCOME + AGE + DRIVING_EXPERIENCE +
CREDIT_SCORE + MARRIED + ANNUAL_MILEAGE + DUIS +
VEHICLE_OWNERSHIP + CHILDREN +
PAST_ACCIDENTS,data=train)
X_test <- model.matrix(~ INCOME + VEHICLE_YEAR +
SPEEDING_VIOLATIONS + OUTCOME + AGE + DRIVING_EXPERIENCE +
CREDIT_SCORE + MARRIED + ANNUAL_MILEAGE + DUIS +
VEHICLE_OWNERSHIP + CHILDREN +
PAST_ACCIDENTS,data=test)
labels <- train$OUTCOME
ts_label <- test$OUTCOME
dtrain <- xgb.DMatrix(data = X_train,label = labels)
dtest <- xgb.DMatrix(data = X_test,label=ts_label)
xgbcv <- xgb.cv(data = dtrain, nrounds = 100,
nfold = 5, showsd = T, stratified = T,
print_every_n = 10, early_stopping_rounds = 20,
maximize = F)
xgbcv
#model #1
xgb1 = xgb.train(data = dtrain,
max.depth = 2,
eta = 1,
nthread = 2,
nrounds = 10,
objective = "binary:logistic",
verbose = 1)
xgbpred1 <- predict(xgb1,dtest)
xgbpred_res1 <- as.numeric(xgbpred1 > 0.45,1,0)
CM = confusionMatrix(as.factor(xgbpred_res1), as.factor(ts_label))
CM
xgbpred_res1 <- as.numeric(xgbpred1 > 0.5,1,0)
CM = confusionMatrix(as.factor(xgbpred_res1), as.factor(ts_label))
CM
length(train$OUTCOME);length(test$OUTCOME)
length(labels);length(ts_label)
dim(dtrain)
dim(dtest)
#model #1
xgb1 = xgb.train(data = dtrain,
max.depth = 2,
eta = 1,
nthread = 2,
nrounds = 10,
objective = "binary:logistic",
verbose = 1)
xgbpred1 <- predict(xgb1,dtest)
xgbpred_res1 <- as.numeric(xgbpred1 > 0.5,1,0)
CM = confusionMatrix(as.factor(xgbpred_res1), as.factor(ts_label))
CM
mat <- xgb.importance (feature_names = colnames(new_tr), model = xgb1)
mat <- xgb.importance (feature_names = colnames(X_train), model = xgb1)
xgb.plot.importance (importance_matrix = mat)
# Convert train and test to matrix
X_train <- model.matrix(~ INCOME + VEHICLE_YEAR +
SPEEDING_VIOLATIONS  + AGE + DRIVING_EXPERIENCE +
CREDIT_SCORE + MARRIED + ANNUAL_MILEAGE + DUIS +
VEHICLE_OWNERSHIP + CHILDREN +
PAST_ACCIDENTS,data=train)
X_test <- model.matrix(~ INCOME + VEHICLE_YEAR +
SPEEDING_VIOLATIONS  + AGE + DRIVING_EXPERIENCE +
CREDIT_SCORE + MARRIED + ANNUAL_MILEAGE + DUIS +
VEHICLE_OWNERSHIP + CHILDREN +
PAST_ACCIDENTS,data=test)
labels <- train$OUTCOME
ts_label <- test$OUTCOME
dtrain <- xgb.DMatrix(data = X_train, label = labels)
dtest <- xgb.DMatrix(data = X_test, label=ts_label)
xgbcv <- xgb.cv(data = dtrain, nrounds = 100,
nfold = 5, showsd = T, stratified = T,
print_every_n = 10, early_stopping_rounds = 20,
maximize = F)
xgbcv
#model #1
xgb1 = xgb.train(data = dtrain,
max.depth = 2,
eta = 1,
nthread = 2,
nrounds = 10,
objective = "binary:logistic",
verbose = 1)
xgbpred1 <- predict(xgb1,dtest)
xgbpred_res1 <- as.numeric(xgbpred1 > 0.5,1,0)
CM = confusionMatrix(as.factor(xgbpred_res1), as.factor(ts_label))
CM
mat <- xgb.importance (feature_names = colnames(X_train), model = xgb1)
xgb.plot.importance (importance_matrix = mat)
logreg <- glm(OUTCOME~., data=train, family=binomial)
proba_logreg <- predict(logreg, newdata=test, type="class")
proba_logreg <- predict(logreg, newdata=test, type="response")
MC_xgb = confusionMatrix(as.factor(xgbpred_res1), as.factor(ts_label))
NC_xgb
MC_xgb
proba_logreg <- predict(logreg, newdata=test, type="response")
pred_logreg <- ifelse(proba_logreg<0.5, 0, 1)
pred_logreg <- factor(pred_logreg)
MC_logreg <- confusionMatrix(test$OUTCOME, pred_logreg)
MC_logreg <- confusionMatrix(as.factor(test$OUTCOME), pred_logreg)
MC_logreg
View(MC_logreg)
MC_tree
MC_xgb = confusionMatrix(as.factor(xgbpred_res1), as.factor(ts_label))
MC_xgb
MC_rf
MC_logreg
pdf(file="./decisionTreeOutput.pdf", width=10, height=10)
print(rpart.plot(decision_tree))
dev.off()
# EDA - histograms
op <- par(mfrow=c(3,3))
hist(data$CREDIT_SCORE)
hist(data$VEHICLE_OWNERSHIP)
hist(data$MARRIED)
hist(data$CHILDREN)
hist(data$ANNUAL_MILEAGE)
hist(data$SPEEDING_VIOLATIONS)
hist(data$DUIS)
hist(data$PAST_ACCIDENTS)
hist(data$OUTCOME)
# EDA - histograms
op <- par(mfrow=c(2,3))
hist(data$CREDIT_SCORE)
#hist(data$VEHICLE_OWNERSHIP)
#hist(data$MARRIED)
#hist(data$CHILDREN)
hist(data$ANNUAL_MILEAGE)
hist(data$SPEEDING_VIOLATIONS)
hist(data$DUIS)
hist(data$PAST_ACCIDENTS)
hist(data$OUTCOME)
hist(VEHICLE_OWNERSHIP~OUTCOME, data=data)
library(tidyverse)
library(ggplot2)
library(cowplot)
library(gridExtra)
library(caret)
library(xgboost)
library(PRROC)
library(mlr)
library(rpart)
library(rpart.plot)
library(corrplot)
data <- read.table("Car_Insurance_Claim.csv", header=T, sep=',')
data = data%>%mutate_if(is.character, as.factor)
data$VEHICLE_OWNERSHIP = as.factor(data$VEHICLE_OWNERSHIP)
data$MARRIED = as.factor(data$MARRIED)
data$CHILDREN = as.factor(data$CHILDREN)
data$OUTCOME = as.factor(data$OUTCOME)
data <- na.omit(data)
summary(data)
# separate plot space in 2x3 blocks
op <- par(mfrow=c(2,3))
# plot histograms
hist(data$CREDIT_SCORE)
hist(data$ANNUAL_MILEAGE)
hist(data$SPEEDING_VIOLATIONS)
hist(data$DUIS)
hist(data$PAST_ACCIDENTS)
hist(as.numeric(levels(data$OUTCOME))[data$OUTCOME])
# separate plot space in 2x3 blocks
op <- par(mfrow=c(2,3))
# plot histograms
hist(data$CREDIT_SCORE, main="Credit score")
hist(data$ANNUAL_MILEAGE, main="Annual mileage")
hist(data$SPEEDING_VIOLATIONS, main = "Speeding violations")
hist(data$DUIS, main="Duis")
hist(data$PAST_ACCIDENTS, main="Past accidents")
hist(as.numeric(levels(data$OUTCOME))[data$OUTCOME], main = "Outcome")
# separate plot space in 2x3 blocks
op <- par(mfrow=c(2,3))
# plot histograms
hist(data$CREDIT_SCORE, main="Credit score", xlab="Value")
hist(data$ANNUAL_MILEAGE, main="Annual mileage", xlab="Value")
hist(data$SPEEDING_VIOLATIONS, main = "Speeding violations", xlab="Value")
hist(data$DUIS, main="Duis", xlab="Value")
hist(data$PAST_ACCIDENTS, main="Past accidents", xlab="Value")
hist(as.numeric(levels(data$OUTCOME))[data$OUTCOME], main = "Outcome", xlab="Value")
# separate plot space in 2x3 blocks
op <- par(mfrow=c(2,3))
# plot histograms
hist(data$CREDIT_SCORE, main="Credit score", xlab="Value")
hist(data$ANNUAL_MILEAGE, main="Annual mileage", xlab="Value")
hist(data$SPEEDING_VIOLATIONS, main = "Speeding violations", xlab="Value")
hist(data$DUIS, main="Duis", xlab="Value")
hist(data$PAST_ACCIDENTS, main="Past accidents", xlab="Value")
hist(as.numeric(levels(data$OUTCOME))[data$OUTCOME], main = "Outcome", xlab="Value")
# EDA - violin plots
cs <- ggplot(data, aes(as.factor(OUTCOME), CREDIT_SCORE)) + geom_violin(fill="pink") + geom_boxplot(width=0.1)
am <- ggplot(data, aes(as.factor(OUTCOME), ANNUAL_MILEAGE)) + geom_violin(fill="pink") + geom_boxplot(width=0.1)
sv <- ggplot(data, aes(as.factor(OUTCOME), SPEEDING_VIOLATIONS)) + geom_violin(fill="pink") + geom_boxplot(width=0.1)
du <- ggplot(data, aes(as.factor(OUTCOME), DUIS)) + geom_violin(fill="pink") + geom_boxplot(width=0.1)
pa <- ggplot(data, aes(as.factor(OUTCOME), PAST_ACCIDENTS)) + geom_violin(fill="pink") + geom_boxplot(width=0.1)
grid.arrange(cs, am, sv, du, pa, ncol=3, nrow=2)
op <- par(mfrow=c(2,3))
ge <- table(data$GENDER, data$OUTCOME)
plot(ge, main="Outcome by gender", col=c('turquoise', 'pink'), cex=1.5)
de <- table(data$DRIVING_EXPERIENCE, data$OUTCOME)
plot(de, main="Outcome by driving experience",col=c('turquoise', 'pink'), cex=1.5)
ag <- table(data$AGE, data$OUTCOME)
plot(ag, main="Outcome by age", col=c('turquoise', 'pink'), cex=1.5)
vo <- table(data$VEHICLE_OWNERSHIP, data$OUTCOME)
plot(vo, main="Outcome by vehicle ownership", col=c('turquoise', 'pink'), cex=1.5)
ic <- table(data$INCOME, data$OUTCOME)
plot(ic, main="Outcome by income", col=c('turquoise', 'pink'), cex=1.5)
vy <- table(data$VEHICLE_YEAR, data$OUTCOME)
plot(vy, main="Outcome by vehicle year", col=c('turquoise', 'pink'), cex=1.5)
num_data <- data %>% select(where(is.numeric))
image <- corrplot(cor(num_data), type = "upper", is.corr = FALSE, method = "number", outline = TRUE, diag = FALSE)
op <- par(mfrow=c(1,1))
num_data <- data %>% select(where(is.numeric))
image <- corrplot(cor(num_data), type = "upper", is.corr = FALSE, method = "number", outline = TRUE, diag = FALSE)
colnames(data_processed)
# EDA - violin plots
cs <- ggplot(data, aes(as.factor(OUTCOME), CREDIT_SCORE)) + geom_violin(fill="pink") + geom_boxplot(width=0.1) + labs(x="Credit score", y="Outcome")
cs
# EDA - violin plots
cs <- ggplot(data, aes(as.factor(OUTCOME), CREDIT_SCORE)) + geom_violin(fill="pink") + geom_boxplot(width=0.1) + labs(x="Outcome", y="Credit score")
cs
# EDA - violin plots
cs <- ggplot(data, aes(as.factor(OUTCOME), CREDIT_SCORE)) + geom_violin(fill="pink") + geom_boxplot(width=0.1) + labs(x="Outcome", y="Credit score")
am <- ggplot(data, aes(as.factor(OUTCOME), ANNUAL_MILEAGE)) + geom_violin(fill="pink") + geom_boxplot(width=0.1) + labs(x="Outcome", y="Annual  mileage")
sv <- ggplot(data, aes(as.factor(OUTCOME), SPEEDING_VIOLATIONS)) + geom_violin(fill="pink") + geom_boxplot(width=0.1) + labs(x="Outcome", y="Speeding violations")
du <- ggplot(data, aes(as.factor(OUTCOME), DUIS)) + geom_violin(fill="pink") + geom_boxplot(width=0.1) + labs(x="Outcome", y="Duis")
pa <- ggplot(data, aes(as.factor(OUTCOME), PAST_ACCIDENTS)) + geom_violin(fill="pink") + geom_boxplot(width=0.1) + labs(x="Outcome", y="Past accidents")
grid.arrange(cs, am, sv, du, pa, ncol=3, nrow=2)
knitr::opts_chunk$set
knitr::opts_chunk
library(caret)
library(corrplot)
library(cowplot)
library(data.table)
library(ggplot2)
library(gridExtra)
library(mlr)
library(mltools)
library(rpart)
library(rpart.plot)
library(tidyverse)
library(xgboost)
library(caret)
library(corrplot)
library(cowplot)
library(data.table)
library(ggplot2)
library(gridExtra)
library(mlr)
library(mltools)
library(rpart)
library(rpart.plot)
library(tidyverse)
library(xgboost)
library(caret)
library(corrplot)
library(cowplot)
library(data.table)
library(ggplot2)
library(gridExtra)
library(mlr)
library(mltools)
library(rpart)
library(rpart.plot)
library(tidyverse)
library(xgboost)
newdata <- one_hot(as.data.table(data))
mat <- cor(newdata)
correlations <- as.data.frame(mat[,37])
names(correlations) <- c("Outcome")
correlations <- correlations %>% arrange(desc(abs(Outcome)))
View(CM)
View(correlations)
select <- correlations[abs(correlations$Outcome)>0.2]
select <- correlations$Outcome[abs(correlations$Outcome)>0.2]
select
select <- correlations %>% select_if(abs(Outcome)>0.2)
select <- correlations %>% select_all(abs(correlations$Outcome)>0.2)
select <- correlations %>% filter(abs(Outcome)>0.2)
select
select(2:)
select[2:]
select[2:,]
select[2,:]
select[2:,:]
select[2:21]
select[2:21,]
# Display all variables which correlation with OUTCOME is more than 20%
select <- correlations %>%
filter(abs(Outcome)>0.2 | abs(Outcome) != 1)
select
# Display all variables which correlation with OUTCOME is more than 20%
select <- correlations %>%
filter(abs(Outcome)>0.2 & abs(Outcome) != 1)
select
